apiVersion: v1
data:
  restic.sh: |-
    #!/bin/bash

    set -o errexit
    set -o nounset
    set -o pipefail
    #
    # Install restic and update postgres wal command

    # shellcheck disable=SC1090
    # shellcheck disable=SC1091

    # Load Generic Libraries
    . /libfile.sh
    . /liblog.sh
    . /libvalidations.sh
    . /libpostgresql.sh


    ########################
    # Load archive variables used on PostgreSQL configuration.
    # Globals:
    #   RESTIC_*, S3_*, AWS_*, ENABLE_RESTIC_BACKUP
    # Arguments:
    #   None
    # Returns:
    #   Series of exports to be used as 'eval' arguments
    #########################
    postgresql_archive_restic_env() {
        cat <<"EOF"
    # S3 settings
    export POSTGRESQL_BASE_BACKUP_DIR="${POSTGRESQL_BASE_BACKUP_DIR:-$POSTGRESQL_VOLUME_DIR/backup}"
    export RESTIC_BINARY_PATH="${RESTIC_BINARY_PATH:-/bitnami/postgresql/restic}"
    export ENABLE_RESTIC_BACKUP="${ENABLE_RESTIC_BACKUP:-}"
    export RESTIC_S3_BUCKET_INIT="${RESTIC_S3_BUCKET_INIT:-}"
    export RESTIC_PASSWORD="${RESTIC_PASSWORD:-}"
    export S3_ENDPOINT="${S3_ENDPOINT:-}"
    export S3_BUCKET_NAME="${S3_BUCKET_NAME:-}"
    export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID:-}"
    export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY:-}"
    EOF
    }


    ########################
    # Restic backup wal files
    # Globals:
    #   POSTGRESQL_*, RESTIC_*, S3_*
    # Arguments:
    #   None
    # Returns:
    #   None
    #########################
    restic_wal_backup() {
        file_array=$($RESTIC_BINARY_PATH -r s3:"$S3_ENDPOINT"/"$S3_BUCKET_NAME" snapshots | awk -F'/' '/pg_wal/ {print $NF}')
        for i in "${POSTGRESQL_DATA_DIR}"/pg_wal/*;do
            # Need fix the archive_status dir still match problem
            if [[ ! " ${file_array[*]} " =~ $i ]] && [[ ! " ${file_array[*]} " =~ archive_status.* ]]; then
                $RESTIC_BINARY_PATH -r s3:"$S3_ENDPOINT"/"$S3_BUCKET_NAME" backup "$i"
            fi
        done
    }


    ########################
    # Change postgresql.conf by setting archiving parameters
    # Globals:
    #   RESTIC_*, S3_*
    # Arguments:
    #   None
    # Returns:
    #   None
    #########################
    postgresql_configure_archive_parameters() {
        postgresql_info "Configuring archive parameters"
        postgresql_set_property "archive_mode" "on"
        if is_boolean_yes "$RESTIC_S3_BUCKET_INIT" && [[ ! -f "${POSTGRESQL_VOLUME_DIR}/restic-${S3_BUCKET_NAME}-init.done" ]]; then
            postgresql_info "Run command restic -r s3:$S3_ENDPOINT/$S3_BUCKET_NAME init"
            $RESTIC_BINARY_PATH -r s3:"$S3_ENDPOINT"/"$S3_BUCKET_NAME" init && touch "${POSTGRESQL_VOLUME_DIR}/restic-${S3_BUCKET_NAME}-init.done" || postgresql_warn "Failed to init new s3 bucket $S3_BUCKET_NAME"
        fi
        postgresql_set_property "archive_command" "${RESTIC_BINARY_PATH} -r s3:${S3_ENDPOINT}/${S3_BUCKET_NAME} backup %p"
    }


    ########################
    # Initiate Postgres base backup
    # Globals:
    #   None
    # Arguments:
    #   None
    # Returns:
    #   None
    #########################
    postgresql_base_backup() {
        if [[ ! -d "${POSTGRESQL_BASE_BACKUP_DIR}" ]]; then
            mkdir "$POSTGRESQL_BASE_BACKUP_DIR"
        else
            rm -rf "${POSTGRESQL_BASE_BACKUP_DIR:?}"/*
        fi
        postgresql_info "Init pg base backup"
        echo "SELECT pg_start_backup('restic');" | postgresql_execute "" "postgres" "$POSTGRES_PASSWORD"
        cp -r "${POSTGRESQL_DATA_DIR}" "${POSTGRESQL_BASE_BACKUP_DIR}"

        # Clean up the backup files
        postgresql_info "Cleanup the base backup"
        rm -f "${POSTGRESQL_BASE_BACKUP_DIR}"/data/postmaster.* "${POSTGRESQL_BASE_BACKUP_DIR}"/data/recovery.*
        rm -rf "${POSTGRESQL_BASE_BACKUP_DIR}"/data/pg_wal/* "${POSTGRESQL_BASE_BACKUP_DIR}"/data/pg_replslot/* "${POSTGRESQL_BASE_BACKUP_DIR}"/data/pg_dynshmem/* "${POSTGRESQL_BASE_BACKUP_DIR}"/data/pg_notify/* "${POSTGRESQL_BASE_BACKUP_DIR}"/data/pg_serial/* "${POSTGRESQL_BASE_BACKUP_DIR}"/data/pg_snapshots/* "${POSTGRESQL_BASE_BACKUP_DIR}"/data/pg_stat_tmp/* "${POSTGRESQL_BASE_BACKUP_DIR}"/data/pg_subtrans/* "${POSTGRESQL_BASE_BACKUP_DIR}"/data/pgsql_tmp
        while IFS= read -r -d '' file
        do
            rm -f "$file"
        done <    <(find "${POSTGRESQL_BASE_BACKUP_DIR}"/data/ -name pg_internal.init -print0)

        # Tar zip the dir and backup with restic to s3
        postgresql_info "Upload base backup to s3"
        tar -C "${POSTGRESQL_BASE_BACKUP_DIR}" -czvf "${POSTGRESQL_VOLUME_DIR}"/basebackup.tar.gz data
        $RESTIC_BINARY_PATH -r s3:"$S3_ENDPOINT"/"$S3_BUCKET_NAME" backup "${POSTGRESQL_VOLUME_DIR}"/basebackup.tar.gz

        postgresql_info "Stop pg base backup"
        echo "SELECT pg_stop_backup();" | postgresql_execute "" "postgres" "$POSTGRES_PASSWORD"
    }



    eval "$(postgresql_archive_restic_env)"
    chmod 00700 -R "${POSTGRESQL_DATA_DIR}"
    if [[ ! -f "${RESTIC_BINARY_PATH}" ]]; then
        postgresql_info "Download restic client"
        curl https://raw.githubusercontent.com/waynesun09/reportportal-operator/master/bin/restic_0.9.6_linux_amd64 -o "$RESTIC_BINARY_PATH"
    fi

    postgresql_info "Update restic client with execute permission"
    chmod +x "$RESTIC_BINARY_PATH"

    postgresql_info "Update archive config"
    is_boolean_yes "$ENABLE_RESTIC_BACKUP" && postgresql_configure_archive_parameters

    postgresql_info "Turn off hot_standby in config if recovery is enabled"
    is_boolean_yes "$ENABLE_RESTIC_RECOVERY" && postgresql_set_property "hot_standby" "off"

    postgresql_info "Check whether basebackup file exist on s3"
    basebackup_id=$("${RESTIC_BINARY_PATH}" -r \
        s3:"${S3_ENDPOINT}"/"${S3_BUCKET_NAME}" snapshots |
        awk -F' ' '/basebackup.tar.gz/ {print $1}')

    postgresql_info "Download basebackup file from s3 if it dose not exist on local"
    if [[ ! -f ${POSTGRESQL_VOLUME_DIR}/basebackup.tar.gz ]] && [[ -n "$basebackup_id" ]]; then
        postgresql_info "Download $basebackup_id file from s3"
        ${RESTIC_BINARY_PATH} -r s3:"$S3_ENDPOINT"/"$S3_BUCKET_NAME" restore "$basebackup_id" -t /tmp
        file=$(find /tmp -regex '.*/basebackup.tar.gz')
        if [[ -n $file ]]; then
            cp "$file" "${POSTGRESQL_VOLUME_DIR}"
        fi
    fi

    postgresql_info "Start base backup process if basebackup file was not found on both local and s3"
    if [[ "$POSTGRESQL_REPLICATION_MODE" = "master" ]]; then
        if [[ ! -f ${POSTGRESQL_VOLUME_DIR}/basebackup.tar.gz ]] && [[ -z "$basebackup_id" ]] && is_boolean_yes "$ENABLE_RESTIC_BACKUP"; then
            postgresql_info "Start base backup"
            postgresql_base_backup
        fi
        # Backup wal files which might be missing after wal archive started
        # Don't backup the missing wal files if base backup package exist in s3
        is_boolean_yes "$ENABLE_RESTIC_BACKUP" && [[ -z "$basebackup_id" ]] && restic_wal_backup
    fi
    chmod 00700 -R "${POSTGRESQL_DATA_DIR}"
kind: ConfigMap
metadata:
  name: pg-restic
  labels:
    app: postgresql
  namespace: {{ meta.namespace }}

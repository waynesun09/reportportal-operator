apiVersion: v1
data:
  elastic_snapshot.sh: |-
    #!/bin/bash
    set -o errexit
    set -o nounset
    set -euxo pipefail


    ########################
    # Load variables used on elasticsearch snapshot and restore.
    # Globals:
    #   ES_*, AWS_*, ENABLE_ES_RESTORE
    # Arguments:
    #   None
    # Returns:
    #   Series of exports to be used as 'eval' arguments
    #########################
    es_snapshot_env() {
        cat <<"EOF"
    export ENABLE_ES_RESTORE="${ENABLE_ES_RESTORE:-no}"
    export ES_RESTORE_DATE="${ES_RESTORE_DATE:-}"
    export ES_S3_BUCKET="${ES_S3_BUCKET:-}"
    export ES_S3_BACKUP_DIR="${ES_S3_BACKUP_DIR:-}"
    export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID:-}"
    export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY:-}"
    EOF
    }


    ########################
    # Check if the provided argument is a boolean or is the string 'yes/true'
    # Arguments:
    #   $1 - Value to check
    # Returns:
    #   Boolean
    #########################
    is_boolean_yes() {
        local -r bool="${1:-}"
        # comparison is performed without regard to the case of alphabetic characters
        shopt -s nocasematch
        if [[ "$bool" = 1 || "$bool" =~ ^(yes|true)$ ]]; then
            true
        else
            false
        fi
    }


    ########################
    # Generate elasticsearch s3 snapshot config json string
    # Arguments:
    #   $1 - endpoint host ip
    #   $2 - endpoint host port
    # Returns:
    #   string
    #########################
    generate_post_data()
    {
      cat <<EOF
    {
      "type": "s3",
      "settings": {
        "bucket": "$ES_S3_BUCKET",
        "endpoint": "$1:$2",
        "protocol": "http"
      }
    }
    EOF
    }


    eval "$(es_snapshot_env)"
    if ! s3cmd mb --host "{{ minio_endpoint }}" --host-bucket "{{ minio_endpoint }}" --no-ssl s3://"$ES_S3_BUCKET"; then
        echo "Create new s3 bucket failed"
    fi

    minio_host=$(echo "{{ minio_endpoint }}" |awk -F:// '{print $2}' |awk -F: '{print $1}')
    minio_port=$(echo "{{ minio_endpoint }}" |awk -F: '{print $3}')
    minio_ip=$(getent hosts "$minio_host" | awk '{ print $1}')

    if [[ -n $ES_S3_BACKUP_DIR ]]; then
        # Update snapshot config each time as the minio ip might have changed
        data=$(generate_post_data "$minio_ip" "$minio_port")
        curl -X PUT -H 'Content-Type: application/json' "http://{{ es_host }}:{{ es_port }}/_snapshot/$ES_S3_BACKUP_DIR" -d "$data"

        if is_boolean_yes "$ENABLE_ES_RESTORE"; then
            restore_date=$(echo "$ES_RESTORE_DATE" | sed 's/-/./g')
            curl -X POST "http://{{ es_host }}:{{ es_port }}/_snapshot/$ES_S3_BACKUP_DIR/snapshot-$restore_date/_restore?wait_for_completion=true"
        else
            curl -X PUT "http://{{ es_host }}:{{ es_port }}/_snapshot/$ES_S3_BACKUP_DIR/%3Csnapshot-%7Bnow%2Fd%7D%3E?wait_for_completion=true"
        fi
    else
        echo "Skip as the snapshot dir is not specified"
    fi
kind: ConfigMap
metadata:
  name: es-snapshot
  labels:
    app: elasticsearch-master
  namespace: {{ meta.namespace }}

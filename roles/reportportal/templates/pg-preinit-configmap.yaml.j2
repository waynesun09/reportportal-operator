apiVersion: v1
data:
  preinit.sh: |-
    #!/bin/bash
    #

    set -o errexit
    set -o nounset
    set -o pipefail
    # shellcheck disable=SC1090
    # shellcheck disable=SC1091

    # Load Generic Libraries
    . /libvalidations.sh
    . /libpostgresql.sh


    ########################
    # Load archive variables used on PostgreSQL configuration.
    # Globals:
    #   RESTIC_*, S3_*, AWS_*, ENABLE_RESTIC_RECOVERY
    # Arguments:
    #   None
    # Returns:
    #   Series of exports to be used as 'eval' arguments
    #########################
    postgresql_archive_restic_env() {
        cat <<"EOF"
    # S3 settings
    export RESTIC_BINARY_PATH="${RESTIC_BINARY_PATH:-/bitnami/postgresql/restic}"
    export RESTIC_RECOVERY_TARGET_TIME="${RESTIC_RECOVERY_TARGET_TIME:-$(date +"%Y-%m-%d 00:00:00")}"
    export ENABLE_RESTIC_RECOVERY="${ENABLE_RESTIC_RECOVERY:-}"
    export RESTIC_S3_BUCKET_INIT="${RESTIC_S3_BUCKET_INIT:-}"
    export RESTIC_PASSWORD="${RESTIC_PASSWORD:-}"
    export RESTIC_SNAPSHOT_ID="${RESTIC_SNAPSHOT_ID:-latest}"
    export S3_ENDPOINT="${S3_ENDPOINT:-}"
    export S3_BUCKET_NAME="${S3_BUCKET_NAME:-}"
    export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID:-}"
    export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY:-}"
    EOF
    }


    eval "$(postgresql_archive_restic_env)"
    if [[ ! -f "${RESTIC_BINARY_PATH}" ]]; then
        postgresql_info "Download restic client"
        curl https://raw.githubusercontent.com/waynesun09/reportportal-operator/master/bin/restic_0.9.6_linux_amd64 -o "$RESTIC_BINARY_PATH"
    fi
    postgresql_info "Update restic client with execute permission"
    chmod +x "$RESTIC_BINARY_PATH"

    if is_boolean_yes "$ENABLE_RESTIC_RECOVERY"; then
        # Download and restore postgresql base backup data file
        snap_id=$(${RESTIC_BINARY_PATH} -r s3:"${S3_ENDPOINT}"/"${S3_BUCKET_NAME}" snapshots --path="${POSTGRESQL_VOLUME_DIR}/basebackup.tar.gz" | grep basebackup | awk -F' ' '{print $1}')
        ${RESTIC_BINARY_PATH} -r s3:"${S3_ENDPOINT}"/"${S3_BUCKET_NAME}" restore "$snap_id" -t /tmp
        tar -C /tmp -xzvf /tmp/"${POSTGRESQL_VOLUME_DIR}"/basebackup.tar.gz
        if [[ -d "${POSTGRESQL_DATA_DIR}_backup" ]]; then
            rm -rf "${POSTGRESQL_DATA_DIR}_backup"
        fi
        mv "$POSTGRESQL_DATA_DIR" "${POSTGRESQL_DATA_DIR}_backup"
        # rm -rf $POSTGRESQL_DATA_DIR/*
        # u_id=$(id -u)
        # chown $u_id:$u_id -R $POSTGRESQL_DATA_DIR
        mkdir "$POSTGRESQL_DATA_DIR"
        chmod -R 00700 "$POSTGRESQL_DATA_DIR"
        cp -r /tmp/data/* "$POSTGRESQL_DATA_DIR"

        # Download all WAL snapshot files
        snap_id=$(${RESTIC_BINARY_PATH} -r s3:"${S3_ENDPOINT}"/"${S3_BUCKET_NAME}" snapshots | grep pg_wal | awk -F' ' '{print $1}')
        if [[ ! -d /tmp/pg_wal ]]; then
            mkdir /tmp/pg_wal
        fi

        for i in $snap_id
        do
            ${RESTIC_BINARY_PATH} -r s3:"$S3_ENDPOINT"/"$S3_BUCKET_NAME" restore "$i" -t /tmp/pg_wal
        done

        if [[ ! -d "${POSTGRESQL_VOLUME_DIR}"/pg_wal ]]; then
            mkdir "${POSTGRESQL_VOLUME_DIR}"/pg_wal
        fi

        while IFS= read -r -d '' file
        do
            cp "$file" "${POSTGRESQL_VOLUME_DIR}"/pg_wal
        done <    <(find /tmp/pg_wal/ -regex '.*/[0-9].*' -print0)

        rm -rf /tmp/pg_wal

        # Update recovery restore_command
        cp -f "$POSTGRESQL_BASE_DIR/share/recovery.conf.sample" "$POSTGRESQL_RECOVERY_FILE"
        chmod 600 "$POSTGRESQL_RECOVERY_FILE"
        postgresql_set_property "restore_command" "cp ${POSTGRESQL_VOLUME_DIR}/pg_wal/%f %p" "$POSTGRESQL_RECOVERY_FILE"
        postgresql_set_property "recovery_target_time" "$RESTIC_RECOVERY_TARGET_TIME" "$POSTGRESQL_RECOVERY_FILE"
        mv "$POSTGRESQL_RECOVERY_FILE" "$POSTGRESQL_VOLUME_DIR"
    fi

    # Remove custom "$POSTGRESQL_VOLUME_DIR/.user_scripts_initialized"
    if [[ -f "$POSTGRESQL_VOLUME_DIR/.user_scripts_initialized" ]]; then
        rm -f "${POSTGRESQL_VOLUME_DIR}/.user_scripts_initialized"
    fi
    chmod -R 00700 "$POSTGRESQL_DATA_DIR"
kind: ConfigMap
metadata:
  name: pg-preinit
  labels:
    app: postgresql
  namespace: {{ meta.namespace }}

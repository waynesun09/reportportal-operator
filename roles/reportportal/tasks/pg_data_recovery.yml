- name: Fetch all RP deployments
  set_fact:
    rp_deployments: "{{ query('k8s', kind='Deployment', namespace=meta.namespace, label_selector='app=reportportal') }}"

- name: Scale RP Deployment replicas to 0
  ignore_errors: yes
  k8s_scale:
    api_version: "{{ k8s_item.apiVersion }}"
    kind: Deployment
    namespace: "{{ meta.namespace }}"
    name: "{{ k8s_item.metadata.name }}"
    replicas: "0"
  register: scale_result
  until: scale_result.result == {} or (scale_result.result.spec is defined and scale_result.result.spec.replicas == 0)
  retries: 6
  delay: 10
  when:
    - k8s_item.apiVersion is defined
    - k8s_item.metadata.name is defined
  with_items: "{{ rp_deployments }}"
  loop_control:
    loop_var: k8s_item

- name: Delete PostgreSQL statefulset
  ignore_errors: yes
  k8s:
    state: absent
    api_version: "{{ k8s_item.apiVersion }}"
    kind: "{{ k8s_item.kind }}"
    namespace: "{{ meta.namespace }}"
    name: "{{ k8s_item.metadata.name }}"
  register: delete_result
  until: delete_result.result == {} or (delete_result.result.status is defined and delete_result.result.status == "Success")
  retries: 6
  delay: 10
  when:
  - k8s_item is defined
  - k8s_item.apiVersion is defined
  - k8s_item.kind is defined
  - k8s_item.metadata is defined
  - k8s_item.metadata.name is defined
  with_items:
  - "{{ query('k8s', namespace=meta.namespace, kind='StatefulSet', label_selector='app=postgresql') }}"
  - "{{ query('k8s', namespace=meta.namespace, kind='ReplicaSet', label_selector='app=postgresql') }}"
  - "{{ query('k8s', namespace=meta.namespace, kind='Pod', label_selector='app=postgresql') }}"
  loop_control:
    loop_var: k8s_item

- name: Create Postgresql statefulset
  k8s:
    state: present
    definition: "{{ lookup('template', 'pg-statefulset.yaml.j2') | from_yaml }}"

- name: Wait Postgresql StatefulSet Pod replica status to running
  ignore_errors: yes
  k8s_info:
    kind: Pod
    label_selectors:
      - app = postgresql
      - controller-revision-hash = k8s_item.status.currentRevision
    namespace: "{{ meta.namespace }}"
  register: pod_result
  until: pod_result.resources[0].status is defined and pod_result.resources[0].status.phase is defined and pod_result.resources[0].status.phase == "Running"
  retries: 20
  delay: 10
  when:
    - k8s_item is defined
    - k8s_item.status is defined
    - k8s_item.status.currentRevision is defined
    - k8s_item.status.currentRevision == 1
  with_items:
  - "{{ query('k8s', namespace=meta.namespace, kind='StatefulSet', label_selector='app=postgresql') }}"
  loop_control:
    loop_var: k8s_item

- name: debug
  debug:
    var: pod_result

- name: Scale back RP Deployment replicas
  ignore_errors: yes
  k8s_scale:
    api_version: "{{ k8s_item.apiVersion }}"
    kind: Deployment
    namespace: "{{ meta.namespace }}"
    name: "{{ k8s_item.metadata.name }}"
    replicas: "{{ k8s_item.spec.replicas }}"
  register: scale_result
  until: scale_result.result.status == {} or (scale_result.result.status is defined and scale_result.result.status.replicas == k8s_item.spec.replicas)
  retries: 6
  delay: 10
  when:
    - k8s_item.apiVersion is defined
    - k8s_item.metadata.name is defined
    - k8s_item.spec.replicas is defined
  with_items: "{{ rp_deployments }}"
  loop_control:
    loop_var: k8s_item

- operator_sdk.util.k8s_status:
    api_version: rp5.reportportal.io/v1alpha1
    kind: ReportPortalRestore
    name: "{{ meta.name }}"
    namespace: "{{ meta.namespace }}"
    status:
      conditions:
        - LastTransitionTime: '{{ ansible_date_time.iso8601 }}'
          message: 'Postgres WAL recovery finished'
          status: 'False'
          reason: 'Done'
          type: 'Finished'
